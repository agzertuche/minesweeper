{"version":3,"sources":["utils/enums.js","components/Cell/Cell.js","components/Counter/Counter.js","contexts/game.js","components/Timer/Timer.js","hooks/useInterval.js","components/Board/Board.js","hooks/useMinesweeper.js","components/Select/Select.js","components/Game/Game.js","hooks/useTheme.js","serviceWorker.js","index.js"],"names":["DIFFICULTY","Object","freeze","BEGGINER","Symbol","INTERMEDIATE","ADVANCED","GAME_STATUS","PLAYING","PAUSED","GAMEOVER","COMPLETED","THEME","DARK","LIGHT","HALLOWEEN","GAMER","CELL_STATUS","FLAGGED","QUESTIONED","REVEALED","HIDDEN","EXPLODED","CONFIG","mines","size","background","color","Cell","status","children","eventHandlers","type","disabled","className","Counter","count","label","GameContext","React","createContext","Timer","delay","useContext","gameState","setGameState","callback","refCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","prevGameState","time","Board","useState","createBoard","board","setBoard","difficulty","cells","Array","from","length","value","placedMines","row","getRandomNumber","column","currentCell","updateNeighborCells","max","Math","floor","random","x","y","rows","i","min","columns","j","cell","flat","filter","c","every","records","sort","onCellRevealed","revealCell","col","state","map","c1","c2","startNewGame","useMinesweeper","onClick","description","undefined","key","onContextMenu","e","event","preventDefault","prevBoard","onCellMarked","Select","options","onChange","values","toLowerCase","Game","theme","setTheme","useLayoutEffect","document","documentElement","style","setProperty","useTheme","target","selectedDifficulty","record","Boolean","window","location","hostname","match","ReactDOM","render","props","setState","Provider","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d8c997fe.chunk.js","sourcesContent":["export const DIFFICULTY = Object.freeze({\n  BEGGINER: Symbol('BEGGINER'),\n  INTERMEDIATE: Symbol('INTERMEDIATE'),\n  ADVANCED: Symbol('ADVANCED'),\n});\n\nexport const GAME_STATUS = Object.freeze({\n  PLAYING: Symbol('PLAYING'),\n  PAUSED: Symbol('PAUSED'),\n  GAMEOVER: Symbol('GAMEOVER'),\n  COMPLETED: Symbol('COMPLETED'),\n});\n\nexport const THEME = Object.freeze({\n  DARK: Symbol('DARK'),\n  LIGHT: Symbol('LIGHT'),\n  HALLOWEEN: Symbol('HALLOWEEN'),\n  GAMER: Symbol('GAMER'),\n});\n\nexport const CELL_STATUS = Object.freeze({\n  FLAGGED: Symbol('FLAGGED'),\n  QUESTIONED: Symbol('QUESTIONED'),\n  REVEALED: Symbol('REVEALED'),\n  HIDDEN: Symbol('HIDDEN'),\n  EXPLODED: Symbol('EXPLODED'),\n});\n\nexport const CONFIG = Object.freeze({\n  DIFFICULTY: {\n    [DIFFICULTY.BEGGINER]: {\n      mines: 10,\n      size: 9,\n    },\n    [DIFFICULTY.INTERMEDIATE]: {\n      mines: 40,\n      size: 16,\n    },\n    [DIFFICULTY.ADVANCED]: {\n      mines: 99,\n      size: 24,\n    },\n  },\n  THEME: {\n    [THEME.LIGHT]: {\n      background: '#f2f2f2',\n      color: '#333333',\n    },\n    [THEME.DARK]: {\n      background: '#333333',\n      color: '#f2f2f2',\n    },\n    [THEME.HALLOWEEN]: {\n      background: '#eb6123',\n      color: 'black',\n    },\n    [THEME.GAMER]: {\n      background: '#663399',\n      color: 'yellow',\n    },\n  },\n});\n","import React from 'react';\nimport { CELL_STATUS } from '../../utils/enums';\nimport './Cell.scss';\n\nfunction Cell({ status, children, ...eventHandlers }) {\n  function hasMine() {\n    return children === 9;\n  }\n\n  function printValue() {\n    if (status === CELL_STATUS.EXPLODED) {\n      return 'üí•';\n    }\n\n    if (status === CELL_STATUS.FLAGGED) {\n      return 'üö©';\n    }\n\n    if (status === CELL_STATUS.QUESTIONED) {\n      return '‚ùì';\n    }\n\n    if (status === CELL_STATUS.REVEALED) {\n      return children === 0 ? '' : hasMine() ? 'üí£' : children;\n    }\n  }\n\n  return (\n    <button\n      type=\"button\"\n      disabled={\n        status === CELL_STATUS.REVEALED || status === CELL_STATUS.EXPLODED\n      }\n      className={status === CELL_STATUS.EXPLODED ? 'exploded' : null}\n      {...eventHandlers}\n    >\n      {printValue()}\n    </button>\n  );\n}\n\nexport default Cell;\n","import React from 'react';\r\n\r\nfunction Counter({ count, label }) {\r\n  return (\r\n    <div>\r\n      {label}\r\n      {count < 10 ? `00${count}` : count < 100 ? `0${count}` : count}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Counter;\r\n","import React, { useState } from 'react';\r\nimport { DIFFICULTY, GAME_STATUS } from '../utils/enums';\r\n\r\nconst GameContext = React.createContext([{}, () => {}]);\r\n\r\nconst GameProvider = props => {\r\n  const [state, setState] = useState({\r\n    difficulty: DIFFICULTY.BEGGINER,\r\n    status: GAME_STATUS.PLAYING,\r\n    time: 0,\r\n    records: [],\r\n  });\r\n  return (\r\n    <GameContext.Provider value={[state, setState]}>\r\n      {props.children}\r\n    </GameContext.Provider>\r\n  );\r\n};\r\n\r\nexport { GameContext, GameProvider };\r\n","import React, { useContext } from 'react';\r\nimport useInterval from '../../hooks/useInterval';\r\nimport { GameContext } from '../../contexts/game';\r\nimport { GAME_STATUS } from '../../utils/enums';\r\nimport { Counter } from '../Counter';\r\n\r\nfunction Timer({ delay = 1000 }) {\r\n  const [gameState, setGameState] = useContext(GameContext);\r\n\r\n  useInterval(\r\n    () => {\r\n      setGameState(prevGameState => ({\r\n        ...prevGameState,\r\n        time: prevGameState.time + 1,\r\n      }));\r\n    },\r\n    gameState.status === GAME_STATUS.PLAYING ? delay : null,\r\n  );\r\n\r\n  return <Counter label=\"Timer: \" count={gameState.time} />;\r\n}\r\n\r\nexport default Timer;\r\n","import { useEffect, useRef } from 'react';\n\nexport default function useInterval(callback, delay) {\n  const refCallback = useRef();\n\n  useEffect(() => {\n    refCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      refCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React, { useContext } from 'react';\r\nimport { Cell } from '../Cell';\r\nimport { Counter } from '../Counter';\r\nimport { Timer } from '../Timer';\r\nimport { CELL_STATUS, GAME_STATUS, CONFIG } from '../../utils/enums';\r\nimport { GameContext } from '../../contexts/game';\r\nimport useMinesweeper from '../../hooks/useMinesweeper';\r\n\r\nimport './Board.scss';\r\n\r\nfunction Board() {\r\n  const { onCellRevealed, board, setBoard, startNewGame } = useMinesweeper();\r\n  const [gameState] = useContext(GameContext);\r\n\r\n  function onCellMarked(event, row, column) {\r\n    event.preventDefault();\r\n\r\n    setBoard(prevBoard => {\r\n      const cell = prevBoard[row][column];\r\n      switch (cell.status) {\r\n        case CELL_STATUS.FLAGGED:\r\n          cell.status = CELL_STATUS.QUESTIONED;\r\n          break;\r\n        case CELL_STATUS.QUESTIONED:\r\n          cell.status = CELL_STATUS.HIDDEN;\r\n          break;\r\n        case CELL_STATUS.HIDDEN:\r\n          cell.status = CELL_STATUS.FLAGGED;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      return [...prevBoard];\r\n    });\r\n  }\r\n\r\n  function missingBombs() {\r\n    const { mines } = CONFIG.DIFFICULTY[gameState.difficulty];\r\n    const flags = board.flat().filter(x => x.status === CELL_STATUS.FLAGGED);\r\n\r\n    return mines - flags.length;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"stats\">\r\n        <Counter label=\"Mines: \" count={missingBombs()} />\r\n        <button onClick={startNewGame}>\r\n          {\r\n            {\r\n              PLAYING: 'üßê',\r\n              PAUSED: 'üòØ',\r\n              GAMEOVER: 'ü§Ø',\r\n              COMPLETED: 'üòé',\r\n            }[gameState.status.description]\r\n          }\r\n        </button>\r\n        <Timer />\r\n      </div>\r\n      <div\r\n        className={`board columns-${board.length} ${\r\n          gameState.status === GAME_STATUS.GAMEOVER ||\r\n          gameState.status === GAME_STATUS.COMPLETED\r\n            ? 'gameover'\r\n            : undefined\r\n        }`}\r\n      >\r\n        {board.map((cell, row) => {\r\n          return cell.map(({ status, value }, column) => (\r\n            <Cell\r\n              key={`${row},${column}`}\r\n              status={status}\r\n              onContextMenu={e => onCellMarked(e, row, column)}\r\n              onClick={() => onCellRevealed(row, column)}\r\n            >\r\n              {value}\r\n            </Cell>\r\n          ));\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n","import { useState, useContext, useEffect } from 'react';\nimport { CELL_STATUS, GAME_STATUS, CONFIG } from '../utils/enums';\nimport { GameContext } from '../contexts/game';\n\nexport default function useMinesweeper() {\n  const [gameState, setGameState] = useContext(GameContext);\n  const [board, setBoard] = useState(() => createBoard());\n\n  useEffect(() => {\n    const isCompleted = board\n      .flat()\n      .filter(c => c.value !== 9)\n      .every(c => c.status === CELL_STATUS.REVEALED);\n\n    if (isCompleted) {\n      setGameState(prevGameState => ({\n        ...prevGameState,\n        status: GAME_STATUS.COMPLETED,\n        records: [...prevGameState.records, prevGameState.time].sort(),\n      }));\n    }\n  }, [setGameState, board]);\n\n  function startNewGame() {\n    setBoard([...createBoard()]);\n    setGameState(prevGameState => ({\n      ...prevGameState,\n      status: GAME_STATUS.PLAYING,\n      time: 0,\n    }));\n  }\n\n  function onCellRevealed(x, y) {\n    const revealCell = (row, col) => {\n      // check if cell is outside the board\n      if (row < 0 || row >= board.length || col < 0 || col >= board[0].length) {\n        return;\n      }\n\n      const cell = board[row][col];\n\n      if (\n        cell.status === CELL_STATUS.FLAGGED ||\n        cell.status === CELL_STATUS.QUESTIONED\n      ) {\n        return;\n      }\n\n      if (cell.status === CELL_STATUS.REVEALED) {\n        return;\n      }\n\n      cell.status = CELL_STATUS.REVEALED;\n\n      if (cell.value === 9) {\n        setGameState(state => ({ ...state, status: GAME_STATUS.GAMEOVER }));\n        board.map(c1 =>\n          c1.map(c2 => {\n            if (c2.value === 9) {\n              c2.status = CELL_STATUS.REVEALED;\n            }\n            return c2;\n          }),\n        );\n        cell.status = CELL_STATUS.EXPLODED;\n        return;\n      }\n\n      // stop revealing cells if it has value grather than zero\n      if (cell.value > 0) {\n        return;\n      }\n\n      // recursively reveal neighboard cells\n      revealCell(row - 1, col - 1);\n      revealCell(row - 1, col);\n      revealCell(row - 1, col + 1);\n      revealCell(row + 1, col - 1);\n      revealCell(row + 1, col);\n      revealCell(row + 1, col + 1);\n      revealCell(row, col - 1);\n      revealCell(row, col + 1);\n    };\n\n    revealCell(x, y);\n    setBoard([...board]);\n  }\n\n  function createBoard() {\n    const { mines, size } = CONFIG.DIFFICULTY[gameState.difficulty];\n\n    // create inital cells array\n    const cells = Array.from({ length: size }, () =>\n      Array.from({ length: size }, () => ({\n        status: CELL_STATUS.HIDDEN,\n        value: 0,\n      })),\n    );\n\n    // place mines randomly on board\n    let placedMines = 0;\n    while (placedMines < mines) {\n      const row = getRandomNumber(cells.length);\n      const column = getRandomNumber(cells.length);\n      const currentCell = cells[row][column];\n\n      // check if the randomly selected cell has already a bomb üí£\n      if (currentCell.value === 9) {\n        continue;\n      }\n\n      // if not place a bomb üí£\n      currentCell.value = 9;\n      placedMines++;\n      updateNeighborCells(row, column);\n    }\n\n    function getRandomNumber(max) {\n      return Math.floor(Math.random() * 1000 + 1) % max;\n    }\n\n    function updateNeighborCells(x, y) {\n      const rows = cells.length;\n      for (let i = Math.max(0, x - 1); i <= Math.min(rows - 1, x + 1); i++) {\n        const columns = cells[i].length;\n        for (\n          let j = Math.max(0, y - 1);\n          j <= Math.min(columns - 1, y + 1);\n          j++\n        ) {\n          const cell = cells[i][j];\n          if (i === x && j === y) {\n            continue;\n          } else if (cell.value !== 9) {\n            cell.value++;\n          }\n        }\n      }\n    }\n\n    return cells;\n  }\n\n  return {\n    onCellRevealed,\n    board,\n    setBoard,\n    startNewGame,\n  };\n}\n","import React from 'react';\n\nfunction Select({ label, options, onChange }) {\n  return (\n    <div>\n      {`${label}: `}\n      <select onChange={onChange}>\n        {Object.values(options).map(({ description }) => (\n          <option key={description} value={description}>\n            {description.toLowerCase()}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n}\n\nexport default Select;\n","import React, { useState, useContext } from 'react';\nimport { Board } from '../Board';\nimport { Select } from '../Select';\nimport useTheme from '../../hooks/useTheme';\nimport { GameContext } from '../../contexts/game';\nimport { CONFIG, DIFFICULTY, THEME } from '../../utils/enums';\nimport './Game.scss';\n\nfunction Game() {\n  const [gameState, setGameState] = useContext(GameContext);\n  const [theme, setTheme] = useState(CONFIG.THEME[THEME.DARK]);\n\n  useTheme(theme);\n\n  return (\n    <main>\n      <header>\n        <Select\n          label=\"Theme\"\n          options={THEME}\n          onChange={e => setTheme(CONFIG.THEME[THEME[e.target.value]])}\n        />\n        <Select\n          label=\"Difficulty\"\n          options={DIFFICULTY}\n          onChange={e => {\n            const selectedDifficulty = e.target.value;\n            setGameState(prevGameState => {\n              return {\n                ...prevGameState,\n                difficulty: DIFFICULTY[selectedDifficulty],\n              };\n            });\n          }}\n        />\n      </header>\n      <section>\n        <Board />\n      </section>\n      {gameState.records.length > 0 && (\n        <footer>\n          <div>Personal records:</div>\n          {gameState.records.map(record => (\n            <div key={record}>{record}</div>\n          ))}\n        </footer>\n      )}\n    </main>\n  );\n}\n\nexport default Game;\n","import { useLayoutEffect } from 'react';\n\nexport default function useTheme(theme) {\n  useLayoutEffect(\n    () => {\n      // Iterate through each value in theme object\n      for (const key in theme) {\n        // Update css variables in document's root element\n        document.documentElement.style.setProperty(`--${key}`, theme[key]);\n      }\n    },\n    [theme], // Only call again if theme object reference changes\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { Game } from './components/Game';\nimport * as serviceWorker from './serviceWorker';\nimport { GameProvider } from './contexts/game';\n\nReactDOM.render(\n  <GameProvider>\n    <Game />\n  </GameProvider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}